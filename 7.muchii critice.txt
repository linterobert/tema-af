#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

void DFS( int k, int tata, vector < int > &v, vector < int > &nivel, vector < int > &nma, vector < vector < int > > &vecini ){
    v[k] = 1;
    if( tata == -1 ){
        nivel[k] = 1;
    }
    else nivel[k] = nivel[tata] + 1;
    nma[k] = nivel[k];
    for( int i = 0; i < vecini[k].size(); i++ ){
        int x;
        x = vecini[k][i];
        if( x != tata ){
            if( v[x] == 1 ){
                if( nma[k] > nivel[x] ){
                    nma[k] = nivel[x];
                }
            }
            else{
                DFS(x, k, v, nivel, nma, vecini);
                if( nma[k] > nma[x] ){
                    nma[k] = nma[x];
                }
                if( nivel[k] < nma[x] ){
                    cout << k << " " << x << endl;
                }
            }
        }
    }
}

int main(){
    vector < int > v, nivel,nma;
    int n, m;
    ifstream fin( "graf" );
    ofstream fout( "graf.out" );
    fin >> n >> m;
    vector < vector < int > > vecini;
    for( int i = 0; i < n; i++ ){
        vector < int > x;
        vecini.push_back(x);
    }
    for( int i = 0; i < m; i++ ){
        int intrare, iesire;
        fin >> intrare >> iesire;
        vecini[intrare].push_back(iesire);
        vecini[iesire].push_back(intrare);
    }
    for( int i = 0; i < n; i++ ){
        nivel.push_back(0);
        nma.push_back(0);
        v.push_back(0);
    }
    DFS( 0, -1, v, nivel, nma, vecini );
}
///bazat pe pseudocodul de pe site-ul https://www.pbinfo.ro/articole/5983/biconexitate