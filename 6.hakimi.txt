#include <iostream>
#include <fstream>
#include <deque>
#include <vector>

using namespace std;

int main(){
    int nr_noduri;
    deque < int > grade;
    deque < int > nr_ordine;
    ifstream fin("graf");
    int suma = 0, ok = 1;
    fin >> nr_noduri;
    vector < vector < int > > vecini(nr_noduri+1);
    for( int i = 1; i <= nr_noduri; i++ ){
        int grad;
        fin >> grad;
        grade.push_back(grad);
        nr_ordine.push_back(i);
        suma = suma + grad;
        if( grad > nr_noduri-1 ) ok = 0;
    }
    if( suma % 2 == 1 ) ok = 0;
    if( ok == 0 ){
        cout << "Nu se poate obtine un graf";
    }
    else{
        //sortare descrescatoare
        for( int i = 0; i < grade.size(); i++ ){
            for( int j = 0; j < i; j++ ){
                if( grade[i] > grade[j] ){
                    int aux;
                    aux = grade[i];
                    grade[i] = grade[j];
                    grade[j] = aux;
                    aux = nr_ordine[i];
                    nr_ordine[i] = nr_ordine[j];
                    nr_ordine[j] = aux;
                }
            }
        }
        while( grade[0] != 0 || grade[ grade.size()-1 ] < 0 ){
            //salvam datele pentru gradul cel mai mare si il eliminam
            int dk = grade[0];
            int nod = nr_ordine[0];
            grade.pop_front();
            nr_ordine.pop_front();
            //afisam muchiile
            for( int i = 0; i < dk; i++ ){
                vecini[nod].push_back(nr_ordine[i]);
                grade[i]--;
            }
            //resortam descrescator
            for( int i = 0; i < grade.size(); i++ ){
                for( int j = 0; j < i; j++ ){
                    if( grade[i] > grade[j] ){
                        int aux;
                        aux = grade[i];
                        grade[i] = grade[j];
                        grade[j] = aux;
                        aux = nr_ordine[i];
                        nr_ordine[i] = nr_ordine[j];
                        nr_ordine[j] = aux;
                    }
                }
            }
        }
        if( grade[0] == 0 && grade[grade.size()-1] >= 0 ){
            for( int i = 0; i < vecini.size(); i++ ){
                for( int j = 0; j < vecini[i].size(); j++ ){
                    cout << i << " " << vecini[i][j] << endl;
                }
            }
        }
        else{
            cout << "Nu se poate construi acest graf";
        }
    }
}
